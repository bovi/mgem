#!/usr/bin/env ruby

require "#{File.dirname(__FILE__)}/../lib/mgem"

gems = load_gems unless ARGV[0] == 'help'

info_proc = lambda do |obj| 
  puts "  #{obj.name.ljust(30)}#{obj.description}"
end

detail_info_proc = lambda do |obj|
  puts <<INFO
  Name:         #{obj.name}
  Author:       #{obj.author}
  Description:  #{obj.description}
  Website:      #{obj.website}
  Repository:   #{obj.repository}
  Repo Options: #{obj.repooptions}
  Protocol:     #{obj.protocol}

INFO
end

def list_active_gems(current_gems)
  puts "List of active GEMs:"
  current_gems.active.each do |obj|
    puts "  [X] #{obj.name.ljust(20)}#{obj.description}" 
  end
  puts
end

def get_toolchain
  puts <<__TOOLCHAIN_SELECT__

Please choose your toolchain:
  'gcc' for GNU Compiler Collection
  'clang' for LLVM C Compiler
  'vs' for Visual Studio 2012 on Windows

__TOOLCHAIN_SELECT__

  print 'Toolchain: '
  STDOUT.flush
  toolchain = case STDIN.gets.chomp
  when 'vs'
    'vs2012'
  when 'clang'
    'clang'
  when 'gcc'
    'gcc'
  else
    puts <<__ERROR__

Your input "#{toolchain}" wasn't valid.
Fallback to GCC toolchain!
__ERROR__

    'gcc'
  end

  toolchain
end

def get_binaries
  puts
  print 'Compile mrbc? (y/n): '
  mrbc = STDIN.gets.chomp
  print 'Compile mruby? (y/n): '
  mruby = STDIN.gets.chomp
  print 'Compile mirb? (y/n): '
  mirb = STDIN.gets.chomp

  binaries = []
  binaries << 'mrbc' unless mrbc == 'n'
  binaries << 'mruby' unless mruby == 'n'
  binaries << 'mirb' unless mirb == 'n'

  binaries.join ' '
end

if ARGV[0] == 'info' or ARGV[0] == 'detail'
  puts "Detail information of '#{ARGV[1]}':"
  gems.search(ARGV[1], :name).each {|gem| detail_info_proc.call(gem) }
elsif ARGV[0] == 'size'
  puts "Total # of GEMs: #{gems.size}"
elsif ARGV[0] == 'list'
  if ARGV[1] == 'active'
    list_active_gems(gems)
  else
    puts "List of all GEMs:"
    gems.each { |gem| info_proc.call(gem) }
  end
elsif ARGV[0] == 'add'
  gems.activate(ARGV[1])
  puts
  list_active_gems(gems)
elsif ARGV[0] == 'rm'
  gems.deactivate(ARGV[1])
  puts
  list_active_gems(gems)
elsif ARGV[0] == 'search'
  puts "Search result for '#{ARGV[1]}':"
  gems.search(ARGV[1]).each {|gem| info_proc.call(gem) }
elsif ARGV[0] == 'update'
  puts 'Update list of GEMs...'
  amount = gems.size
  gems.update!
  gems = load_gems
  new_gems = gems.size - amount
  if new_gems > 0
    puts "#{new_gems} new GEMs!"
  end
elsif ARGV[0] == 'config'
  if ARGV[1] == 'default'
    toolchain = 'gcc'
    binaries = 'mrbc mruby mirb'
  else
    toolchain = get_toolchain
    binaries = get_binaries
  end
  gem_command = gems.active.map do |g|
    options = ", :options => \'#{g.repooptions}\'" unless g.repooptions.nil?
    "  conf.gem :git => \'#{g.repository}\'#{options}"
  end.join("\n")

  if gem_command == ''
    gem_command = '  # No GEMs activated'
  end

  puts <<__CONFIG__

############################
# Start of your build_config

MRuby::Build.new do |conf|
  toolchain :#{toolchain}

  conf.bins = %w(#{binaries})

#{gem_command}
end

# End of your build_config
############################
__CONFIG__
else
  puts <<INFO
mgem (Version #{MGEM_VERSION}) is a library manager for mruby

Usage:
  mgem size              How many GEMs are available?
  mgem list [active]     List GEMs
  mgem info *pattern*    Show detail information about a GEM
  mgem add *name*        Activate a GEM
  mgem rm *name*         De-Activate a GEM
  mgem search *pattern*  Search for GEMs
  mgem config            Generate a mruby build config including all active GEMs
  mgem config default    Same as 'mgem config' but w/o interactive questions
  mgem update            Update the list of GEMs

Website:
  https://github.com/bovi/mgem
INFO
end
